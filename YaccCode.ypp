
%{

%}

/* keywords */
%token IF
%token ELSE
%token FOR
%token DO
%token WHILE
%token RETURN
%token BREAK
%token CONTINUE

%token SHORT_TYPE
%token INT_TYPE
%token LONG_TYPE
%token UNSIGNED_TYPE
%token FLOAT_TYPE
%token DOUBLE_TYPE
%token CHAR_TYPE
%token STRUCT_TYPE
%token ENUM_TYPE
%token UNION_TYPE
%token VOID_TYPE

/* identifiers */
%token ID

 /* parentheses, braces, brackets, punctuation */
%token L_PAREN
%token R_PAREN
%token L_BRACKET
%token R_BRACKET
%token L_BRACE
%token R_BRACE
%token COMMA
%token DOT
%token SEMICOLON
%token COLON
%token QUESTION

 /* arithmetic operators */
%left  PLUS      MINUS
%left  ASTERISK  DIVIDE  MODULO
%right INCREMENT
%right DECREMENT
%right U_MINUS

 /* Assignment operators */
%token ASSN
%token ADD_ASSN
%token MINUS_ASSN
%token MULTI_ASSN
%token DIVIDE_ASSN
%token MODULO_ASSN
%token AND_ASSN
%token OR_ASSN
%token XOR_ASSN

 /* comparison operators */
%token EQUAL_COMP
%token NOT_EQUAL_COMP
%token LESS_THAN_COMP
%token GREATER_THAN_COMP
%token LESS_THAN_EQUAL_COMP
%token GREATER_THAN_EQUAL_COMP

 /* logical operators */
%token LOGICAL_AND
%token LOGICAL_OR
%token LOGICAL_NOT

 /* bitwise operators */
%token AMP
%token BITWISE_OR
%token BITWISE_XOR
%token BITWISE_LSHIFT
%token BITWISE_RSHIFT
%token BITWISE_NOT

 /* Literals: ints, floating-point, chars, strings */
%token LIT_NUM
%token LIT_CHAR
%token LIT_STRING
%token LIT_CHAR
%token LIT_STRING



%%


 /* Expressions, Terms, Factors */
expr   : term '+' expr               {}
       | term '-' expr               {}
       | '(' expr ')'                {}
       | '-' expr %prec U_MINUS  {}
       | term                        {}
       ;

term   : factor '*' term  {}
       | factor '/' term  {}
       | factor           {}
       ;

factor : '(' expr ')'     {}
       | id               {}
       ;


 /* if statements */
ifStmt          : matched_ifStmt {}
                | open_ifStmt    {}
                ;

matched_ifStmt  : if '(' expr ')' '{' matched_ifStmt '}' else '{' matched_ifStmt '}' {}
                ;

open_ifStmt     : if '(' expr ')' '{' ifStmt '}' {}
                | if '(' expr ')' '{' matched_ifStmt '}' else '{' open_ifStmt '}'    {}


 /* while loops */


 /* for loops */
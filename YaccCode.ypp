
%skeleton "lalr1.cc"
%require "3.8.1"
%header

%define api.token.raw
%define api.token.constructor
%define api.value.type variant
%define parse.assert

%code requires {
    #include <string>

    class Driver;
}

%param { Driver &d }

%start program

%locations

%define parse.trace
%define parse.error detailed
%define parse.lac full

%code {
    #include "../driver.h"
    #include "../SyntaxTree.h"
    int MINUS_NT = 4;
}


 /* I used this page as a reference for precedence:               */
 /* https://en.cppreference.com/w/c/language/operator_precedence  */


 /* No Precedence necessary */
%token L_BRACE R_BRACE
%token SEMICOLON
%token DUMMY
%token NULL_STMT
%token VAR_DEC FUN_PROTO FUN_DEF
%token DATA_TYPE
%token IF_ELSE
%token PARAM
%token LIST_NODE


%token IF
%token ELSE
%token FOR
%token DO
%token WHILE
%token RETURN
%token BREAK
%token CONTINUE
%token FCALL

%token SHORT_TYPE
%token INT_TYPE
%token LONG_TYPE
%token LONG_LONG_TYPE
%token UNSIGNED_TYPE
%token FLOAT_TYPE
%token DOUBLE_TYPE
%token CHAR_TYPE
%token STRUCT_TYPE
%token ENUM_TYPE
%token UNION_TYPE
%token VOID_TYPE

%token ID
%token LIT_NUM LIT_CHAR LIT_STRING


 /* Level 15 Precedence */
%token COMMA


 /* Level 14 Precedence */
%token AND_ASSN   OR_ASSN     XOR_ASSN
%token MULTI_ASSN DIVIDE_ASSN MODULO_ASSN
%token ADD_ASSN   MINUS_ASSN
%token ASSN


 /* Level 13 Precedence */
 /* TERNARY */
%token COLON
%token QUESTION


 /* Level 12 Precedence */
%token LOGICAL_OR


 /* Level 11 Precedence */
%token LOGICAL_AND


 /* Level 10 Precedence */
%token BITWISE_OR


 /* Level 9 Precedence */
%token BITWISE_XOR


 /* Level 8 Precedence */
 /* bitwise AND */


 /* Level 7 Precedence */
%token EQUAL_COMP NOT_EQUAL_COMP


 /* Level 6 Precedence */
%token GREATER_COMP GREATER_EQUAL_COMP
%token LESS_COMP    LESS_EQUAL_COMP


 /* Level 5 Precedence */
%token BITWISE_LSHIFT BITWISE_RSHIFT


 /* Level 4 Precedence */
%left PLUS MINUS


 /* Level 3 Precedence */
%left ASTERISK DIVIDE MODULO


 /* Level 2 Precedence */
 /* Sizeof */
%token    AMP
 /* DEREFERENCE */
 /* TYPE CAST */
%token    LOGICAL_NOT BITWISE_NOT
%nonassoc U_MINUS


 /* Level 1 Precedence */
%token DOT
%token L_BRACKET R_BRACKET
%token L_PAREN   R_PAREN
%right INCREMENT DECREMENT





%printer { yyo << $$; } <*>;

%%

 /* Grammar Section =============== */


 /* Expressions */
expr   : LIT_NUM                       { $$ = d.makeLeaf(LIT_NUM,  $1);     }
       | LIT_CHAR                      { $$ = d.makeLeaf(LIT_CHAR, $1);     }
       | ID                            { $$ = d.makeLeaf(yy::parser::token::ID,       $1);     }
       | ID argListCall                { $$ = d.makeNode(yy::parser::token::FCALL,    $1, $2); } /* make a function call node with function name ID as left child and argList as right child */
       | expr PLUS     expr            { $$ = d.makeNode(yy::parser::token::PLUS,     $1, $3); }
       | expr MINUS    expr            { $$ = d.makeNode(yy::parser::token::MINUS, $1, $3) ;      }
       | expr ASTERISK expr            { $$ = d.makeNode(yy::parser::token::ASTERISK, $1, $3); }
       | expr DIVIDE   expr            { $$ = d.makeNode(yy::parser::token::DIVIDE,   $1, $3); }
       | expr MODULO   expr            { $$ = d.makeNode(yy::parser::token::MODULO,   $1, $3); }

       | expr EQUAL_COMP         expr  { $$ = d.makeNode(EQUAL_COMP,         $1, $3); }
       | expr NOT_EQUAL_COMP     expr  { $$ = d.makeNode(NOT_EQUAL_COMP,     $1, $3); }
       | expr GREATER_COMP       expr  { $$ = d.makeNode(GREATER_COMP,       $1, $3); }
       | expr GREATER_EQUAL_COMP expr  { $$ = d.makeNode(GREATER_EQUAL_COMP, $1, $3); }
       | expr LESS_COMP          expr  { $$ = d.makeNode(LESS_COMP,          $1, $3); }
       | expr LESS_EQUAL_COMP    expr  { $$ = d.makeNode(LESS_EQUAL_COMP,    $1, $3); }

       | expr ASSN        expr         { $$ = d.makeNode(ASSN,        $1, $3); }
       | expr ADD_ASSN    expr         { $$ = d.makeNode(ADD_ASSN,    $1, $3); }
       | expr MINUS_ASSN  expr         { $$ = d.makeNode(MINUS_ASSN,  $1, $3); }
       | expr MULTI_ASSN  expr         { $$ = d.makeNode(MULTI_ASSN,  $1, $3); }
       | expr DIVIDE_ASSN expr         { $$ = d.makeNode(DIVIDE_ASSN, $1, $3); }
       | expr MODULO_ASSN expr         { $$ = d.makeNode(MODULO_ASSN, $1, $3); }
       | expr AND_ASSN    expr         { $$ = d.makeNode(AND_ASSN,    $1, $3); }
       | expr OR_ASSN     expr         { $$ = d.makeNode(OR_ASSN,     $1, $3); }
       | expr XOR_ASSN    expr         { $$ = d.makeNode(XOR_ASSN,    $1, $3); }

       | MINUS expr %prec U_MINUS      { $$ = d.makeNode(U_MINUS,   -1, $2); }  /* Unsure if this is how to handle -expr */
       | L_PAREN expr R_PAREN          { $$ = $2; }
       ;


 /* Data Types */
dataType : qualifierList baseType  { $$ = d.makeNode(DATA_TYPE, $1, $2); }
         ;

qualifierList : qualifier qualifierList  { $$ = d.makeNode(LIST_NODE, $1, $2); }
              | /* empty */              { }
              ;

qualifier : SHORT_TYPE           { $$ = d.makeLeaf(SHORT_TYPE,     $1);          }
          | LONG_TYPE            { $$ = d.makeLeaf(LONG_TYPE,      $1);          }
          | UNSIGNED_TYPE        { $$ = d.makeLeaf(UNSIGNED_TYPE,  $1);          }
          ;

baseType : INT_TYPE     { $$ = d.makeLeaf(INT_TYPE,    $1); }
         | FLOAT_TYPE   { $$ = d.makeLeaf(FLOAT_TYPE,  $1); }
         | DOUBLE_TYPE  { $$ = d.makeLeaf(DOUBLE_TYPE, $1); }
         | CHAR_TYPE    { $$ = d.makeLeaf(CHAR_TYPE,   $1); }
         | VOID_TYPE    { $$ = d.makeLeaf(VOID_TYPE,   $1); }
         ;


 /* regular statements */
stmt : expr SEMICOLON            { $$ = $1; }  /*  expression ;                                           */
     | ifStmt                    { $$ = $1; }  /*  if ( expression ) statement else statement             */
     | whileStmt                 { $$ = $1; }  /*  while ( expression ) statement                         */
     | doWhileStmt               { $$ = $1; }  /*  do statement while ( expression )                      */
     | L_BRACE stmtList R_BRACE  { $$ = $2; }  /*  { statementList }                                      */
     | SEMICOLON                 { $$ = $1; }  /*  ; (null statement)                                     */
     | forStmt                   { $$ = $1; }  /*  for ( expression ; expression; expression ) statement  */
     ;


 /* list of statements */
stmtList : stmt           { $$ = $1; }
         | stmt stmtList  { $$ = d.makeNode(LIST_NODE, $1, $2); }
         ;


 /* if statements */
ifStmt     : IF L_PAREN expr R_PAREN stmt  { $$ = d.makeNode(IF, $3, d.makeNode(DUMMY, $5, -1) ); }
           ;

ifElseStmt : IF L_PAREN expr R_PAREN stmt ELSE stmt { $$ = d.makeNode(IF, $3, d.makeNode(DUMMY, $5, $7) ); }
           ;


 /* while loops */
whileStmt : WHILE L_PAREN expr R_PAREN stmt  { $$ = d.makeNode(WHILE, $3, $5); }
          ;


doWhileStmt : DO stmt WHILE L_PAREN expr R_PAREN SEMICOLON  { $$ = d.makeNode(DO, $2, $5); }
            ;


 /* for loops */
forStmt : FOR L_PAREN expr SEMICOLON expr SEMICOLON expr R_PAREN stmt  { $$ = d.makeNode(FOR, d.makeNode(DUMMY, $3, $5), d.makeNode(DUMMY, $7, $9) ); }
        ;


 /* ID, parameter, argument lists (variable-length) */

idList : ID               { $$ = $1; }
       | ID COMMA idList  { $$ = d.makeNode(LIST_NODE, $1, $3); }
       ;


exprList : expr                 { $$ = $1; }
         | expr COMMA exprList  { $$ = d.makeNode(LIST_NODE, $1, $3); }
         ;


argListCall : L_PAREN exprList R_PAREN  { $$ = $2; }
            | L_PAREN R_PAREN           { $$ = -1; }
            ;


parameter : dataType ID  { $$ = d.makeNode(PARAM, $1, $2); }
          ;

paramList : parameter                  { $$ = $1; }
          | parameter COMMA paramList  { $$ = d.makeNode(LIST_NODE, $1, $3); }


paramListCall : L_PAREN paramList R_PAREN { $$ = $2; }
              | L_PAREN R_PAREN           { $$ = -1; }
              ;


 /* variable declarations */
varDec : dataType idList SEMICOLON  {d.makeNode(VAR_DEC, $1, $2); }  /*  int x, y;  */
       ;


varDecList : /* empty */        { $$ = -1; }
           | varDec varDecList  { $$ = d.makeNode(LIST_NODE, $1, $2); }
           ;


 /* function prototypes, declarations, calls */
funProto : dataType ID paramList SEMICOLON  { $$ = d.makeNode(FUN_PROTO, d.makeNode(DUMMY, $1, $2), $3 ); }
         ;


funDec : dataType ID paramList L_BRACE varDecList stmtList R_BRACE  { $$ = d.makeNode(FUN_DEF, d.makeNode(DUMMY, $1, $2), d.makeNode(DUMMY, $3, d.makeNode(DUMMY, $5, $6) ) ); }
       ;


 /* global items */
globalItem : funProto    { $$ = $1; }
           | funDec      { $$ = $1; }
           | varDecList  { $$ = $1; }
           ;


globalItemList : globalItem                 { $$ = $1; }
               | globalItem globalItemList  { $$ = d.makeNode(SEMICOLON, $1, $2); }
               ;


 /* the program */
program : globalItemList { $$ = $1; }
        ;





%%

 /* User Code Section =============== */




void yy::parser::error(const location_type &l,const std::string &m) {

    std::cerr << l << ": " << m << '\n';
}
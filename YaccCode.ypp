
%{

%}

/* keywords */
%token IF_TOKEN
%token ELSE_TOKEN
%token FOR_TOKEN
%token DO_TOKEN
%token WHILE_TOKEN
%token RETURN_TOKEN
%token BREAK_TOKEN
%token CONTINUE_TOKEN

%token SHORT_TYPE_TOKEN
%token INT_TYPE_TOKEN
%token LONG_TYPE_TOKEN
%token UNSIGNED_TYPE_TOKEN
%token FLOAT_TYPE_TOKEN
%token DOUBLE_TYPE_TOKEN
%token CHAR_TYPE_TOKEN
%token STRUCT_TYPE_TOKEN
%token ENUM_TYPE_TOKEN
%token UNION_TYPE_TOKEN
%token VOID_TYPE_TOKEN


/* identifiers */
%token ID_TOKEN

 /* parentheses, braces, brackets, punctuation */
%token L_PAREN_TOKEN
%token R_PAREN_TOKEN
%token L_BRACKET_TOKEN
%token R_BRACKET_TOKEN
%token L_BRACE_TOKEN
%token R_BRACE_TOKEN
%token COMMA_TOKEN
%token DOT_TOKEN
%token SEMICOLON_TOKEN
%token COLON_TOKEN
%token QUESTION_TOKEN

 /* arithmetic operators */
%token PLUS_TOKEN
%token MINUS_TOKEN
%token ASTERISK_TOKEN
%token DIVIDE_TOKEN
%token MODULO_TOKEN
%right INCREMENT_TOKEN
%right DECREMENT_TOKEN

 /* Assignment operators */
%token ASSN_TOKEN
%token ADD_ASSN_TOKEN
%token MINUS_ASSN_TOKEN
%token MULTI_ASSN_TOKEN
%token DIVIDE_ASSN_TOKEN
%token MODULO_ASSN_TOKEN
%token AND_ASSN_TOKEN
%token OR_ASSN_TOKEN
%token XOR_ASSN_TOKEN

 /* comparison operators */
%token EQUAL_COMP_TOKEN
%token NOT_EQUAL_COMP_TOKEN
%token LESS_THAN_COMP_TOKEN
%token GREATER_THAN_COMP_TOKEN
%token LESS_THAN_EQUAL_COMP_TOKEN
%token GREATER_THAN_EQUAL_COMP_TOKEN

 /* logical operators */
%token LOGICAL_AND_TOKEN
%token LOGICAL_OR_TOKEN
%token LOGICAL_NOT_TOKEN

 /* bitwise operators */
%token AMP_TOKEN
%token BITWISE_OR_TOKEN
%token BITWISE_XOR_TOKEN
%token BITWISE_LSHIFT_TOKEN
%token BITWISE_RSHIFT_TOKEN
%token BITWISE_NOT_TOKEN

 /* Literals: ints, floating-point, chars, strings */
%token LIT_NUM_TOKEN
%token LIT_CHAR_TOKEN
%token LIT_STRING_TOKEN
%token LIT_CHAR_TOKEN
%token LIT_STRING_TOKEN



%%


 /* Expressions, Terms, Factors */
expr   : term '+' expr    {}
       | term '-' expr    {}
       | term             {}
       ;

term   : factor '*' term  {}
       | factor '/' term  {}
       | factor           {}
       ;

factor : '(' expr ')'     {}
       | id               {}
       ;


 /* if statements */
ifStmt          : matched_ifStmt {}
                | open_ifStmt    {}
                ;

matched_ifStmt  : if '(' expr ')' '{' matched_ifStmt '}' else '{' matched_ifStmt '}' {}
                ;

open_ifStmt     : if '(' expr ')' '{' ifStmt '}' {}
                | if '(' expr ')' '{' matched_ifStmt '}' else '{' open_ifStmt '}'    {}


 /* while loops */


 /* for loops */
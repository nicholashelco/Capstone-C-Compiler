
%skeleton "lalr1.cc"
%require "3.8.1"
%header

%define api.token.raw

%define api.token.constructor
%define api.value.type variant
%define parse.assert

%code requires {
    #include <string>

    class Driver;
}

%param { Driver &d }

%locations

%define parse.trace
%define parse.error detailed
%define parse.lac full

%code {
    #include "../driver.h"
    #include "../SyntaxTree.h"
}


 /* I used this page as a reference for precedence:               */
 /* https://en.cppreference.com/w/c/language/operator_precedence  */


 /* No Precedence necessary */
%token L_BRACE R_BRACE
%token SEMICOLON
%token DUMMY

%token IF
%token ELSE
%token FOR
%token DO
%token WHILE
%token RETURN
%token BREAK
%token CONTINUE
%token FCALL

%token SHORT_TYPE
%token INT_TYPE
%token LONG_TYPE
%token LONG_LONG_TYPE
%token UNSIGNED_TYPE
%token FLOAT_TYPE
%token DOUBLE_TYPE
%token CHAR_TYPE
%token STRUCT_TYPE
%token ENUM_TYPE
%token UNION_TYPE
%token VOID_TYPE

%token ID
%token LIT_NUM LIT_CHAR LIT_STRING


 /* Level 15 Precedence */
%token COMMA


 /* Level 14 Precedence */
%token AND_ASSN   OR_ASSN     XOR_ASSN
%token MULTI_ASSN DIVIDE_ASSN MODULO_ASSN
%token ADD_ASSN   MINUS_ASSN
%token ASSN


 /* Level 13 Precedence */
 /* TERNARY */
%token COLON
%token QUESTION


 /* Level 12 Precedence */
%token LOGICAL_OR


 /* Level 11 Precedence */
%token LOGICAL_AND


 /* Level 10 Precedence */
%token BITWISE_OR


 /* Level 9 Precedence */
%token BITWISE_XOR


 /* Level 8 Precedence */
 /* bitwise AND */


 /* Level 7 Precedence */
%token EQUAL_COMP NOT_EQUAL_COMP


 /* Level 6 Precedence */
%token GREATER_THAN_COMP GREATER_THAN_EQUAL_COMP
%token LESS_THAN_COMP    LESS_THAN_EQUAL_COMP


 /* Level 5 Precedence */
%token BITWISE_LSHIFT BITWISE_RSHIFT


 /* Level 4 Precedence */
%left PLUS MINUS


 /* Level 3 Precedence */
%left ASTERISK DIVIDE MODULO


 /* Level 2 Precedence */
 /* Sizeof */
%token    AMP
 /* DEREFERENCE */
 /* TYPE CAST */
%token    LOGICAL_NOT BITWISE_NOT
%nonassoc U_MINUS


 /* Level 1 Precedence */
%token DOT
%token L_BRACKET R_BRACKET
%token L_PAREN   R_PAREN
%right INCREMENT DECREMENT





%printer { yyo << $$; } <*>;

%%

 /* Grammar Section =============== */



 /* Expressions */
expr   : LIT_NUM                   { $$ = d.makeLeaf(LIT_NUM,  $1);     }
       | LIT_CHAR                  { $$ = d.makeLeaf(LIT_CHAR, $1);     }
       | ID                        { $$ = d.makeLeaf(ID,       $1);     }
       | ID argList                { $$ = d.makeNode(FCALL,    $1, $3); } /* make a function call node with function name ID as left child and argList as right child */
       | expr PLUS expr            { $$ = d.makeNode(PLUS,     $1, $3); }
       | expr MINUS expr           { $$ = d.makeNode(MINUS,    $1, $3); }
       | expr ASTERISK expr        { $$ = d.makeNode(ASTERISK, $1, $3); }
       | expr DIVIDE expr          { $$ = d.makeNode(DIVIDE,   $1, $3); }
       | expr MODULO expr          { $$ = d.makeNode(MODULO,   $1, $3); }
       | expr compOp expr          { $$ = d.makeNode($2,       $1, $3); }
       | expr assignOp expr        { $$ = d.makeNode($2,       $1, $3); }  /* Unsure if using $2 is right */
       | MINUS expr %prec U_MINUS  { $$ = d.makeNode(MINUS,     0, $2); }  /* Unsure if this is how to handle -expr */
       | L_PAREN expr R_PAREN      { }
       ;


 /* Data Types */
dataType : qualifierList baseType  {}
         ;

qualifierList : qualifier qualifierList  {}
              |                          {}
              ;

qualifier : SHORT_TYPE           { $$ = d.makeLeaf(SHORT_TYPE,     $1);          }
          | LONG_TYPE            { $$ = d.makeLeaf(LONG_TYPE,      $1);          }
          | LONG_TYPE LONG_TYPE  { $$ = d.makeLeaf(LONG_LONG_TYPE, "long long"); }
          | UNSIGNED_TYPE        { $$ = d.makeLeaf(UNSIGNED_TYPE,  $1);          }
          ;

baseType : INT_TYPE     { $$ = d.makeLeaf(INT_TYPE,    $1); }
         | FLOAT_TYPE   { $$ = d.makeLeaf(FLOAT_TYPE,  $1); }
         | DOUBLE_TYPE  { $$ = d.makeLeaf(DOUBLE_TYPE, $1); }
         | CHAR_TYPE    { $$ = d.makeLeaf(CHAR_TYPE,   $1); }
         | VOID_TYPE    { $$ = d.makeLeaf(VOID_TYPE,   $1); }
         ;


 /* An assignment operator */
assignOp : ASSN         { $$ = d.makeLeaf(ASSN,        $1); }
         | ADD_ASSN     { $$ = d.makeLeaf(ADD_ASSN,    $1); }
         | MINUS_ASSN   { $$ = d.makeLeaf(MINUS_ASSN,  $1); }
         | MULTI_ASSN   { $$ = d.makeLeaf(MULTI_ASSN,  $1); }
         | DIVIDE_ASSN  { $$ = d.makeLeaf(DIVIDE_ASSN, $1); }
         | MODULO_ASSN  { $$ = d.makeLeaf(MODULO_ASSN, $1); }
         | AND_ASSN     { $$ = d.makeLeaf(AND_ASSN,    $1); }
         | OR_ASSN      { $$ = d.makeLeaf(OR_ASSN,     $1); }
         | XOR_ASSN     { $$ = d.makeLeaf(XOR_ASSN,    $1); }
         ;


 /* A comparison operator */
compOp : EQUAL_COMP               { $$ = d.makeLeaf(EQUAL_COMP,              $1); }
       | NOT_EQUAL_COMP           { $$ = d.makeLeaf(NOT_EQUAL_COMP,          $1); }
       | GREATER_THAN_COMP        { $$ = d.makeLeaf(GREATER_THAN_COMP,       $1); }
       | GREATER_THAN_EQUAL_COMP  { $$ = d.makeLeaf(GREATER_THAN_EQUAL_COMP, $1); }
       | LESS_THAN_COMP           { $$ = d.makeLeaf(LESS_THAN_COMP,          $1); }
       | LESS_THAN_EQUAL_COMP     { $$ = d.makeLeaf(LESS_THAN_EQUAL_COMP,    $1); }
       ;


 /* regular statements */
stmt : expr SEMICOLON            {}  /*  expression ;                                           */
     | ifStmt                    {}  /*  if ( expression ) statement else statement             */
     | whileStmt                 {}  /*  while ( expression ) statement                         */
     | doWhileStmt               {}  /*  do statement while ( expression )                      */
     | L_BRACE stmtList R_BRACE  {}  /*  { statementList }                                      */
     | SEMICOLON                 {}  /*  ; (null statement)                                     */
     | forStmt                   {}  /*  for ( expression ; expression; expression ) statement  */
     ;


 /* list of statements */
stmtList : stmt           {}
         | stmt stmtList  {}
         ;


 /* if statements */
ifStmt          : matched_ifStmt {}
                | open_ifStmt    {}
                ;


matched_ifStmt  : IF L_PAREN expr R_PAREN L_BRACE matched_ifStmt R_BRACE ELSE L_BRACE matched_ifStmt R_BRACE {}
                ;


open_ifStmt     : IF L_PAREN expr R_PAREN L_BRACE ifStmt R_BRACE {}
                | IF L_PAREN expr R_PAREN L_BRACE matched_ifStmt R_BRACE ELSE L_BRACE open_ifStmt R_BRACE    {}
                ;


 /* while loops */
whileStmt : WHILE L_PAREN expr R_PAREN stmt  {}
          ;


doWhileStmt : DO stmt WHILE L_PAREN expr R_PAREN SEMICOLON  {}


 /* for loops */
forStmt : FOR L_PAREN expr SEMICOLON expr SEMICOLON expr R_PAREN stmt  {}
        ;


 /* ID, parameter, argument lists (variable-length) */

 idList : ID               {}
        | ID COMMA idList  {}
        ;


paramList : L_PAREN R_PAREN              {}
          | L_PAREN paramList R_PAREN    {}
          | dataType ID                  {}
          | dataType ID COMMA paramList  {}
          ;


argList : L_PAREN R_PAREN          {}
        | L_PAREN argList R_PAREN  {}
        | expr                     {}
        | expr COMMA argList       {}
        ;


 /* variable declarations */
varDec : dataType idList               SEMICOLON  {}  /*  int x, y;          */
       | dataType idList assignOp expr SEMICOLON  {}  /*  int x, y = m * 2;  */
       ;


varDecList : varDec             {}
           | varDec varDecList  {}
           ;


 /* function prototypes, declarations, calls */
funProto : dataType ID paramList SEMICOLON  {}
         ;


funDec : dataType ID paramList L_BRACE stmtList R_BRACE  {}
       ;


 /* global items */
globalItem : funProto      {}
           | funDec        {}
           | varDecList    {}
           ;


globalItemList : globalItem                 {}
               | globalItem globalItemList  {}
               ;


 /* the program */
program : globalItemList {}
        ;





%%

 /* User Code Section =============== */




void yy::parser::error(const location_type &l,const std::string &m) {

    std::cerr << l << ": " << m << '\n';
}